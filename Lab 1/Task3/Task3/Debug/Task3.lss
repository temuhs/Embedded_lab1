
Task3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000442  000004b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000442  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e9  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068d  00000000  00000000  00000d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b3  00000000  00000000  000013da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001790  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003af  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bb  00000000  00000000  00001bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001daa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 1f 02 	jmp	0x43e	; 0x43e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include<stdlib.h>


int main ()
{
	DDRD = (1 << 5)|(1 << 6)|(1 << 7);
  96:	80 ee       	ldi	r24, 0xE0	; 224
  98:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)|(1 << 4)|(1 << 5); //PB0, PB1, PB2, PB3 and PB4 as an output
  9a:	8f e3       	ldi	r24, 0x3F	; 63
  9c:	84 b9       	out	0x04, r24	; 4
	EIMSK = (1 << INT0); //enable external interrupt 0
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0x03; //make INTO rising edge triggered
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	sei (); //enable interrupts
  a8:	78 94       	sei
  aa:	ff cf       	rjmp	.-2      	; 0xaa <main+0x14>

000000ac <delay_ms>:
	//(M+f) => (14+7)*100 = 2s of delay
	//2/0.000064 = 31250 (clock cycles to make 2s)
	//2^16 = 65536 (clock is 16, that means 655396 bites)
	//65536-31250 = 34286 (Start number for the counter)
	
	OCR1A = 34286; //delay
  ac:	8e ee       	ldi	r24, 0xEE	; 238
  ae:	95 e8       	ldi	r25, 0x85	; 133
  b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0x00; //normal mode but operating CTC?0
  b8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS12)|(1<<CS10); //set the prescalar as 1024
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	while((TIFR1 &(1<<OCF1A))==0) //wait till the timer overflows flag is SET
  c2:	b1 9b       	sbis	0x16, 1	; 22
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <delay_ms+0x16>
	{
	}
	TCCR1B = 0x00; // Turn off clock1
  c6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1 = 0; //Reset counter
  ca:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ce:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= 1<<OCF1A; //Clear time overflow flag
  d2:	86 b3       	in	r24, 0x16	; 22
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	86 bb       	out	0x16, r24	; 22
  d8:	08 95       	ret

000000da <delay_ms_short>:
	
}

void delay_ms_short()
{	
	OCR1A = 5000; //delay
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	93 e1       	ldi	r25, 0x13	; 19
  de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0x00; //normal mode but operating CTC?0
  e6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS12)|(1<<CS10); //set the prescalar as 1024
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	while((TIFR1 &(1<<OCF1A))==0) //wait till the timer overflows flag is SET
  f0:	b1 9b       	sbis	0x16, 1	; 22
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <delay_ms_short+0x16>
	{
	}
	TCCR1B = 0x00; // Turn off clock1
  f4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1 = 0; //Reset counter
  f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIFR1 |= 1<<OCF1A; //Clear time overflow flag
 100:	86 b3       	in	r24, 0x16	; 22
 102:	82 60       	ori	r24, 0x02	; 2
 104:	86 bb       	out	0x16, r24	; 22
 106:	08 95       	ret

00000108 <__vector_1>:
	sei (); //enable interrupts
	while (1){
	}; //wait here
}
ISR (INT0_vect) //ISR for external interrupt 0
{	
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	for(int i = 5; i < 8; i++){
 132:	05 e0       	ldi	r16, 0x05	; 5
 134:	10 e0       	ldi	r17, 0x00	; 0
 136:	13 c0       	rjmp	.+38     	; 0x15e <__vector_1+0x56>
		PORTD |= (1 << i);
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	c1 e0       	ldi	r28, 0x01	; 1
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	00 2e       	mov	r0, r16
 140:	02 c0       	rjmp	.+4      	; 0x146 <__vector_1+0x3e>
 142:	cc 0f       	add	r28, r28
 144:	dd 1f       	adc	r29, r29
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <__vector_1+0x3a>
 14a:	8c 2b       	or	r24, r28
 14c:	8b b9       	out	0x0b, r24	; 11
		delay_ms_short();
 14e:	0e 94 6d 00 	call	0xda	; 0xda <delay_ms_short>
		PORTD &= ~(1 << i);
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	c0 95       	com	r28
 156:	c8 23       	and	r28, r24
 158:	cb b9       	out	0x0b, r28	; 11
	while (1){
	}; //wait here
}
ISR (INT0_vect) //ISR for external interrupt 0
{	
	for(int i = 5; i < 8; i++){
 15a:	0f 5f       	subi	r16, 0xFF	; 255
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
 15e:	08 30       	cpi	r16, 0x08	; 8
 160:	11 05       	cpc	r17, r1
 162:	54 f3       	brlt	.-44     	; 0x138 <__vector_1+0x30>
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	10 e0       	ldi	r17, 0x00	; 0
 168:	13 c0       	rjmp	.+38     	; 0x190 <__vector_1+0x88>
		delay_ms_short();
		PORTD &= ~(1 << i);
	}
	
	for(int i = 0; i < 6; i++){
			PORTB |= (1 << i);
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	c1 e0       	ldi	r28, 0x01	; 1
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	00 2e       	mov	r0, r16
 172:	02 c0       	rjmp	.+4      	; 0x178 <__vector_1+0x70>
 174:	cc 0f       	add	r28, r28
 176:	dd 1f       	adc	r29, r29
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <__vector_1+0x6c>
 17c:	8c 2b       	or	r24, r28
 17e:	85 b9       	out	0x05, r24	; 5
			delay_ms_short();
 180:	0e 94 6d 00 	call	0xda	; 0xda <delay_ms_short>
			PORTB &= ~(1 << i);
 184:	85 b1       	in	r24, 0x05	; 5
 186:	c0 95       	com	r28
 188:	c8 23       	and	r28, r24
 18a:	c5 b9       	out	0x05, r28	; 5
		PORTD |= (1 << i);
		delay_ms_short();
		PORTD &= ~(1 << i);
	}
	
	for(int i = 0; i < 6; i++){
 18c:	0f 5f       	subi	r16, 0xFF	; 255
 18e:	1f 4f       	sbci	r17, 0xFF	; 255
 190:	06 30       	cpi	r16, 0x06	; 6
 192:	11 05       	cpc	r17, r1
 194:	54 f3       	brlt	.-44     	; 0x16a <__vector_1+0x62>
 196:	c0 e0       	ldi	r28, 0x00	; 0
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	11 c0       	rjmp	.+34     	; 0x1be <__vector_1+0xb6>
			delay_ms_short();
			PORTB &= ~(1 << i);
	}
	
	for(int i = 0; i < 3; i++){
		PORTD |= (1 << 5)|(1 << 6)|(1 << 7);
 19c:	8b b1       	in	r24, 0x0b	; 11
 19e:	80 6e       	ori	r24, 0xE0	; 224
 1a0:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)|(1 << 4)|(1 << 5); //toggle PORTB.2
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	8f 63       	ori	r24, 0x3F	; 63
 1a6:	85 b9       	out	0x05, r24	; 5
		delay_ms_short(); //wait 1 sec
 1a8:	0e 94 6d 00 	call	0xda	; 0xda <delay_ms_short>
		PORTB &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)|(1 << 4)|(1 << 5)); //untoggle PORTB.2
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	80 7c       	andi	r24, 0xC0	; 192
 1b0:	85 b9       	out	0x05, r24	; 5
		PORTD &= ~((1 << 5)|(1 << 6)|(1 << 7));
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	8f 71       	andi	r24, 0x1F	; 31
 1b6:	8b b9       	out	0x0b, r24	; 11
		delay_ms_short();
 1b8:	0e 94 6d 00 	call	0xda	; 0xda <delay_ms_short>
			PORTB |= (1 << i);
			delay_ms_short();
			PORTB &= ~(1 << i);
	}
	
	for(int i = 0; i < 3; i++){
 1bc:	21 96       	adiw	r28, 0x01	; 1
 1be:	c3 30       	cpi	r28, 0x03	; 3
 1c0:	d1 05       	cpc	r29, r1
 1c2:	64 f3       	brlt	.-40     	; 0x19c <__vector_1+0x94>
		PORTB &= ~((1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)|(1 << 4)|(1 << 5)); //untoggle PORTB.2
		PORTD &= ~((1 << 5)|(1 << 6)|(1 << 7));
		delay_ms_short();
	}

	int randNumber = 1 + ( rand() % 6 );
 1c4:	0e 94 ac 01 	call	0x358	; 0x358 <rand>
 1c8:	66 e0       	ldi	r22, 0x06	; 6
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	0e 94 38 01 	call	0x270	; 0x270 <__divmodhi4>
 1d0:	01 96       	adiw	r24, 0x01	; 1
	
	switch(randNumber){
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	91 05       	cpc	r25, r1
 1d6:	b1 f0       	breq	.+44     	; 0x204 <__vector_1+0xfc>
 1d8:	34 f4       	brge	.+12     	; 0x1e6 <__vector_1+0xde>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	91 05       	cpc	r25, r1
 1de:	51 f0       	breq	.+20     	; 0x1f4 <__vector_1+0xec>
 1e0:	02 97       	sbiw	r24, 0x02	; 2
 1e2:	61 f0       	breq	.+24     	; 0x1fc <__vector_1+0xf4>
 1e4:	2a c0       	rjmp	.+84     	; 0x23a <__vector_1+0x132>
 1e6:	85 30       	cpi	r24, 0x05	; 5
 1e8:	91 05       	cpc	r25, r1
 1ea:	d1 f0       	breq	.+52     	; 0x220 <__vector_1+0x118>
 1ec:	94 f0       	brlt	.+36     	; 0x212 <__vector_1+0x10a>
 1ee:	06 97       	sbiw	r24, 0x06	; 6
 1f0:	f1 f0       	breq	.+60     	; 0x22e <__vector_1+0x126>
 1f2:	23 c0       	rjmp	.+70     	; 0x23a <__vector_1+0x132>
		case 1: 
			PORTB |= (1 << 1);
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	85 b9       	out	0x05, r24	; 5
			break;
 1fa:	1f c0       	rjmp	.+62     	; 0x23a <__vector_1+0x132>
		case 2: 
			PORTB |= (1 << 0)|(1 << 2);
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	85 60       	ori	r24, 0x05	; 5
 200:	85 b9       	out	0x05, r24	; 5
			break;
 202:	1b c0       	rjmp	.+54     	; 0x23a <__vector_1+0x132>
		case 3: 
			PORTD |= (1 << 5); PORTB |= (1 << 1)|(1 << 5);
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	80 62       	ori	r24, 0x20	; 32
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	85 b1       	in	r24, 0x05	; 5
 20c:	82 62       	ori	r24, 0x22	; 34
 20e:	85 b9       	out	0x05, r24	; 5
			break;
 210:	14 c0       	rjmp	.+40     	; 0x23a <__vector_1+0x132>
		case 4: 
			PORTD |= (1 << 5)|(1 << 7); PORTB |= (1 << 3)|(1 << 5);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	80 6a       	ori	r24, 0xA0	; 160
 216:	8b b9       	out	0x0b, r24	; 11
 218:	85 b1       	in	r24, 0x05	; 5
 21a:	88 62       	ori	r24, 0x28	; 40
 21c:	85 b9       	out	0x05, r24	; 5
			break;
 21e:	0d c0       	rjmp	.+26     	; 0x23a <__vector_1+0x132>
		case 5: 
			PORTD |= (1 << 5)|(1 << 7); PORTB |= (1 << 3)|(1 << 1)|(1 << 5);
 220:	8b b1       	in	r24, 0x0b	; 11
 222:	80 6a       	ori	r24, 0xA0	; 160
 224:	8b b9       	out	0x0b, r24	; 11
 226:	85 b1       	in	r24, 0x05	; 5
 228:	8a 62       	ori	r24, 0x2A	; 42
 22a:	85 b9       	out	0x05, r24	; 5
			break;
 22c:	06 c0       	rjmp	.+12     	; 0x23a <__vector_1+0x132>
		case 6: 
			PORTD |= (1 << 5)|(1 << 6)|(1 << 7); PORTB |= (1 << 3)|(1 << 4)|(1 << 5);
 22e:	8b b1       	in	r24, 0x0b	; 11
 230:	80 6e       	ori	r24, 0xE0	; 224
 232:	8b b9       	out	0x0b, r24	; 11
 234:	85 b1       	in	r24, 0x05	; 5
 236:	88 63       	ori	r24, 0x38	; 56
 238:	85 b9       	out	0x05, r24	; 5
			break;
	}
	delay_ms();
 23a:	0e 94 56 00 	call	0xac	; 0xac <delay_ms>
	delay_ms();
 23e:	0e 94 56 00 	call	0xac	; 0xac <delay_ms>
	PORTD = 0x00;
 242:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0x00;
 244:	15 b8       	out	0x05, r1	; 5
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <__divmodhi4>:
 270:	97 fb       	bst	r25, 7
 272:	07 2e       	mov	r0, r23
 274:	16 f4       	brtc	.+4      	; 0x27a <__divmodhi4+0xa>
 276:	00 94       	com	r0
 278:	07 d0       	rcall	.+14     	; 0x288 <__divmodhi4_neg1>
 27a:	77 fd       	sbrc	r23, 7
 27c:	09 d0       	rcall	.+18     	; 0x290 <__divmodhi4_neg2>
 27e:	0e 94 4c 01 	call	0x298	; 0x298 <__udivmodhi4>
 282:	07 fc       	sbrc	r0, 7
 284:	05 d0       	rcall	.+10     	; 0x290 <__divmodhi4_neg2>
 286:	3e f4       	brtc	.+14     	; 0x296 <__divmodhi4_exit>

00000288 <__divmodhi4_neg1>:
 288:	90 95       	com	r25
 28a:	81 95       	neg	r24
 28c:	9f 4f       	sbci	r25, 0xFF	; 255
 28e:	08 95       	ret

00000290 <__divmodhi4_neg2>:
 290:	70 95       	com	r23
 292:	61 95       	neg	r22
 294:	7f 4f       	sbci	r23, 0xFF	; 255

00000296 <__divmodhi4_exit>:
 296:	08 95       	ret

00000298 <__udivmodhi4>:
 298:	aa 1b       	sub	r26, r26
 29a:	bb 1b       	sub	r27, r27
 29c:	51 e1       	ldi	r21, 0x11	; 17
 29e:	07 c0       	rjmp	.+14     	; 0x2ae <__udivmodhi4_ep>

000002a0 <__udivmodhi4_loop>:
 2a0:	aa 1f       	adc	r26, r26
 2a2:	bb 1f       	adc	r27, r27
 2a4:	a6 17       	cp	r26, r22
 2a6:	b7 07       	cpc	r27, r23
 2a8:	10 f0       	brcs	.+4      	; 0x2ae <__udivmodhi4_ep>
 2aa:	a6 1b       	sub	r26, r22
 2ac:	b7 0b       	sbc	r27, r23

000002ae <__udivmodhi4_ep>:
 2ae:	88 1f       	adc	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	5a 95       	dec	r21
 2b4:	a9 f7       	brne	.-22     	; 0x2a0 <__udivmodhi4_loop>
 2b6:	80 95       	com	r24
 2b8:	90 95       	com	r25
 2ba:	bc 01       	movw	r22, r24
 2bc:	cd 01       	movw	r24, r26
 2be:	08 95       	ret

000002c0 <do_rand>:
 2c0:	8f 92       	push	r8
 2c2:	9f 92       	push	r9
 2c4:	af 92       	push	r10
 2c6:	bf 92       	push	r11
 2c8:	cf 92       	push	r12
 2ca:	df 92       	push	r13
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	ec 01       	movw	r28, r24
 2d6:	68 81       	ld	r22, Y
 2d8:	79 81       	ldd	r23, Y+1	; 0x01
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	9b 81       	ldd	r25, Y+3	; 0x03
 2de:	61 15       	cp	r22, r1
 2e0:	71 05       	cpc	r23, r1
 2e2:	81 05       	cpc	r24, r1
 2e4:	91 05       	cpc	r25, r1
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <do_rand+0x30>
 2e8:	64 e2       	ldi	r22, 0x24	; 36
 2ea:	79 ed       	ldi	r23, 0xD9	; 217
 2ec:	8b e5       	ldi	r24, 0x5B	; 91
 2ee:	97 e0       	ldi	r25, 0x07	; 7
 2f0:	2d e1       	ldi	r18, 0x1D	; 29
 2f2:	33 ef       	ldi	r19, 0xF3	; 243
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	50 e0       	ldi	r21, 0x00	; 0
 2f8:	0e 94 bc 01 	call	0x378	; 0x378 <__divmodsi4>
 2fc:	49 01       	movw	r8, r18
 2fe:	5a 01       	movw	r10, r20
 300:	9b 01       	movw	r18, r22
 302:	ac 01       	movw	r20, r24
 304:	a7 ea       	ldi	r26, 0xA7	; 167
 306:	b1 e4       	ldi	r27, 0x41	; 65
 308:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__muluhisi3>
 30c:	6b 01       	movw	r12, r22
 30e:	7c 01       	movw	r14, r24
 310:	ac ee       	ldi	r26, 0xEC	; 236
 312:	b4 ef       	ldi	r27, 0xF4	; 244
 314:	a5 01       	movw	r20, r10
 316:	94 01       	movw	r18, r8
 318:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__mulohisi3>
 31c:	dc 01       	movw	r26, r24
 31e:	cb 01       	movw	r24, r22
 320:	8c 0d       	add	r24, r12
 322:	9d 1d       	adc	r25, r13
 324:	ae 1d       	adc	r26, r14
 326:	bf 1d       	adc	r27, r15
 328:	b7 ff       	sbrs	r27, 7
 32a:	03 c0       	rjmp	.+6      	; 0x332 <do_rand+0x72>
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	a1 09       	sbc	r26, r1
 330:	b0 48       	sbci	r27, 0x80	; 128
 332:	88 83       	st	Y, r24
 334:	99 83       	std	Y+1, r25	; 0x01
 336:	aa 83       	std	Y+2, r26	; 0x02
 338:	bb 83       	std	Y+3, r27	; 0x03
 33a:	9f 77       	andi	r25, 0x7F	; 127
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	df 90       	pop	r13
 346:	cf 90       	pop	r12
 348:	bf 90       	pop	r11
 34a:	af 90       	pop	r10
 34c:	9f 90       	pop	r9
 34e:	8f 90       	pop	r8
 350:	08 95       	ret

00000352 <rand_r>:
 352:	0e 94 60 01 	call	0x2c0	; 0x2c0 <do_rand>
 356:	08 95       	ret

00000358 <rand>:
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <do_rand>
 360:	08 95       	ret

00000362 <srand>:
 362:	a0 e0       	ldi	r26, 0x00	; 0
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 36a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 36e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 372:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 376:	08 95       	ret

00000378 <__divmodsi4>:
 378:	05 2e       	mov	r0, r21
 37a:	97 fb       	bst	r25, 7
 37c:	1e f4       	brtc	.+6      	; 0x384 <__divmodsi4+0xc>
 37e:	00 94       	com	r0
 380:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__negsi2>
 384:	57 fd       	sbrc	r21, 7
 386:	07 d0       	rcall	.+14     	; 0x396 <__divmodsi4_neg2>
 388:	0e 94 ee 01 	call	0x3dc	; 0x3dc <__udivmodsi4>
 38c:	07 fc       	sbrc	r0, 7
 38e:	03 d0       	rcall	.+6      	; 0x396 <__divmodsi4_neg2>
 390:	4e f4       	brtc	.+18     	; 0x3a4 <__divmodsi4_exit>
 392:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__negsi2>

00000396 <__divmodsi4_neg2>:
 396:	50 95       	com	r21
 398:	40 95       	com	r20
 39a:	30 95       	com	r19
 39c:	21 95       	neg	r18
 39e:	3f 4f       	sbci	r19, 0xFF	; 255
 3a0:	4f 4f       	sbci	r20, 0xFF	; 255
 3a2:	5f 4f       	sbci	r21, 0xFF	; 255

000003a4 <__divmodsi4_exit>:
 3a4:	08 95       	ret

000003a6 <__negsi2>:
 3a6:	90 95       	com	r25
 3a8:	80 95       	com	r24
 3aa:	70 95       	com	r23
 3ac:	61 95       	neg	r22
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	8f 4f       	sbci	r24, 0xFF	; 255
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	08 95       	ret

000003b6 <__muluhisi3>:
 3b6:	0e 94 10 02 	call	0x420	; 0x420 <__umulhisi3>
 3ba:	a5 9f       	mul	r26, r21
 3bc:	90 0d       	add	r25, r0
 3be:	b4 9f       	mul	r27, r20
 3c0:	90 0d       	add	r25, r0
 3c2:	a4 9f       	mul	r26, r20
 3c4:	80 0d       	add	r24, r0
 3c6:	91 1d       	adc	r25, r1
 3c8:	11 24       	eor	r1, r1
 3ca:	08 95       	ret

000003cc <__mulshisi3>:
 3cc:	b7 ff       	sbrs	r27, 7
 3ce:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__muluhisi3>

000003d2 <__mulohisi3>:
 3d2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__muluhisi3>
 3d6:	82 1b       	sub	r24, r18
 3d8:	93 0b       	sbc	r25, r19
 3da:	08 95       	ret

000003dc <__udivmodsi4>:
 3dc:	a1 e2       	ldi	r26, 0x21	; 33
 3de:	1a 2e       	mov	r1, r26
 3e0:	aa 1b       	sub	r26, r26
 3e2:	bb 1b       	sub	r27, r27
 3e4:	fd 01       	movw	r30, r26
 3e6:	0d c0       	rjmp	.+26     	; 0x402 <__udivmodsi4_ep>

000003e8 <__udivmodsi4_loop>:
 3e8:	aa 1f       	adc	r26, r26
 3ea:	bb 1f       	adc	r27, r27
 3ec:	ee 1f       	adc	r30, r30
 3ee:	ff 1f       	adc	r31, r31
 3f0:	a2 17       	cp	r26, r18
 3f2:	b3 07       	cpc	r27, r19
 3f4:	e4 07       	cpc	r30, r20
 3f6:	f5 07       	cpc	r31, r21
 3f8:	20 f0       	brcs	.+8      	; 0x402 <__udivmodsi4_ep>
 3fa:	a2 1b       	sub	r26, r18
 3fc:	b3 0b       	sbc	r27, r19
 3fe:	e4 0b       	sbc	r30, r20
 400:	f5 0b       	sbc	r31, r21

00000402 <__udivmodsi4_ep>:
 402:	66 1f       	adc	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	88 1f       	adc	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	1a 94       	dec	r1
 40c:	69 f7       	brne	.-38     	; 0x3e8 <__udivmodsi4_loop>
 40e:	60 95       	com	r22
 410:	70 95       	com	r23
 412:	80 95       	com	r24
 414:	90 95       	com	r25
 416:	9b 01       	movw	r18, r22
 418:	ac 01       	movw	r20, r24
 41a:	bd 01       	movw	r22, r26
 41c:	cf 01       	movw	r24, r30
 41e:	08 95       	ret

00000420 <__umulhisi3>:
 420:	a2 9f       	mul	r26, r18
 422:	b0 01       	movw	r22, r0
 424:	b3 9f       	mul	r27, r19
 426:	c0 01       	movw	r24, r0
 428:	a3 9f       	mul	r26, r19
 42a:	70 0d       	add	r23, r0
 42c:	81 1d       	adc	r24, r1
 42e:	11 24       	eor	r1, r1
 430:	91 1d       	adc	r25, r1
 432:	b2 9f       	mul	r27, r18
 434:	70 0d       	add	r23, r0
 436:	81 1d       	adc	r24, r1
 438:	11 24       	eor	r1, r1
 43a:	91 1d       	adc	r25, r1
 43c:	08 95       	ret

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
